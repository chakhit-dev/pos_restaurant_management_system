
import com.itextpdf.kernel.pdf.PdfDocument;
import com.itextpdf.kernel.pdf.PdfWriter;
import com.itextpdf.layout.Document;
import com.itextpdf.layout.element.Paragraph;
import com.itextpdf.layout.properties.TextAlignment;
import java.awt.FlowLayout;
import java.awt.GridLayout;
import java.awt.event.FocusAdapter;
import java.awt.event.FocusEvent;
import java.io.IOException;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import javax.swing.event.*;
import javax.swing.table.DefaultTableModel;

public class frame_main extends javax.swing.JFrame {

    public frame_main() {
        initComponents();
        
        fetchCategory();
//        fetchCategoryTest();
        fetchItems();
        lisTxtCash();
        
        DefaultTableModel model = (DefaultTableModel) tb_cart.getModel();
        model.addTableModelListener(new TableModelListener() {
            @Override
            public void tableChanged(TableModelEvent e) {
                // ทุกครั้งที่มีการเปลี่ยนแปลงใน JTable, คำนวณ total ใหม่
                updateTotal(tb_cart, txt_total);
            }
        });
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked") 
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tb_cart = new javax.swing.JTable();
        btn_pay = new javax.swing.JButton();
        btn_clear = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        btn_1 = new javax.swing.JButton();
        btn_2 = new javax.swing.JButton();
        btn_3 = new javax.swing.JButton();
        btn_4 = new javax.swing.JButton();
        btn_5 = new javax.swing.JButton();
        btn_6 = new javax.swing.JButton();
        btn_7 = new javax.swing.JButton();
        btn_8 = new javax.swing.JButton();
        btn_9 = new javax.swing.JButton();
        btn_0 = new javax.swing.JButton();
        btn_dot = new javax.swing.JButton();
        btn_clear_number = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        txt_total = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        panel_showitems = new javax.swing.JPanel();
        jLayeredPane1 = new javax.swing.JLayeredPane();
        cmb_category = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();
        jLayeredPane2 = new javax.swing.JLayeredPane();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txt_cash = new javax.swing.JTextField();
        txt_change = new javax.swing.JTextField();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jMenuItem2 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tb_cart.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Qty", "ID", "Item", "Price", "Des"
            }
        ));
        tb_cart.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tb_cartMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tb_cart);
        if (tb_cart.getColumnModel().getColumnCount() > 0) {
            tb_cart.getColumnModel().getColumn(0).setMaxWidth(40);
            tb_cart.getColumnModel().getColumn(0).setHeaderValue("Qty");
            tb_cart.getColumnModel().getColumn(1).setMaxWidth(50);
            tb_cart.getColumnModel().getColumn(1).setHeaderValue("ID");
            tb_cart.getColumnModel().getColumn(2).setHeaderValue("Item");
            tb_cart.getColumnModel().getColumn(3).setMaxWidth(80);
            tb_cart.getColumnModel().getColumn(3).setHeaderValue("Price");
            tb_cart.getColumnModel().getColumn(4).setHeaderValue("Des");
        }

        btn_pay.setText("Pay");
        btn_pay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_payActionPerformed(evt);
            }
        });

        btn_clear.setText("Clear");
        btn_clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_clearActionPerformed(evt);
            }
        });

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        btn_1.setText("1");
        btn_1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                btn_1FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                btn_1FocusLost(evt);
            }
        });
        btn_1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_1ActionPerformed(evt);
            }
        });

        btn_2.setText("2");
        btn_2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_2ActionPerformed(evt);
            }
        });

        btn_3.setText("3");
        btn_3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_3ActionPerformed(evt);
            }
        });

        btn_4.setText("4");
        btn_4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_4ActionPerformed(evt);
            }
        });

        btn_5.setText("5");
        btn_5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_5ActionPerformed(evt);
            }
        });

        btn_6.setText("6");
        btn_6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_6ActionPerformed(evt);
            }
        });

        btn_7.setText("7");
        btn_7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_7ActionPerformed(evt);
            }
        });

        btn_8.setText("8");
        btn_8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_8ActionPerformed(evt);
            }
        });

        btn_9.setText("9");
        btn_9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_9ActionPerformed(evt);
            }
        });

        btn_0.setText("0");
        btn_0.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_0ActionPerformed(evt);
            }
        });

        btn_dot.setText(".");
        btn_dot.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_dotActionPerformed(evt);
            }
        });

        btn_clear_number.setText("C");
        btn_clear_number.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_clear_numberActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(btn_1, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btn_2, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btn_3, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(btn_7, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btn_4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 80, Short.MAX_VALUE)
                            .addComponent(btn_clear_number, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btn_5, javax.swing.GroupLayout.DEFAULT_SIZE, 80, Short.MAX_VALUE)
                            .addComponent(btn_8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btn_0, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(btn_9, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btn_6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 80, Short.MAX_VALUE)
                            .addComponent(btn_dot, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_1, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_2, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_3, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_4, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_5, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_6, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_7, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_8, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_9, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_0, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_dot, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_clear_number, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(18, Short.MAX_VALUE))
        );

        jLabel1.setText("Total");

        txt_total.setText("0.00");

        javax.swing.GroupLayout panel_showitemsLayout = new javax.swing.GroupLayout(panel_showitems);
        panel_showitems.setLayout(panel_showitemsLayout);
        panel_showitemsLayout.setHorizontalGroup(
            panel_showitemsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 519, Short.MAX_VALUE)
        );
        panel_showitemsLayout.setVerticalGroup(
            panel_showitemsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 495, Short.MAX_VALUE)
        );

        jScrollPane2.setViewportView(panel_showitems);

        jLayeredPane1.setBorder(javax.swing.BorderFactory.createTitledBorder("Catagory"));

        cmb_category.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Name 1", "Name 2" }));
        cmb_category.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmb_categoryActionPerformed(evt);
            }
        });

        jButton1.setText("Select");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLayeredPane1.setLayer(cmb_category, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(jButton1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jLayeredPane1Layout = new javax.swing.GroupLayout(jLayeredPane1);
        jLayeredPane1.setLayout(jLayeredPane1Layout);
        jLayeredPane1Layout.setHorizontalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane1Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(cmb_category, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addGap(16, 16, 16))
        );
        jLayeredPane1Layout.setVerticalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmb_category, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addContainerGap(11, Short.MAX_VALUE))
        );

        jLayeredPane2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel2.setText("Cash");

        jLabel3.setText("Change");

        txt_cash.setText("0.00");
        txt_cash.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txt_cashFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txt_cashFocusLost(evt);
            }
        });

        txt_change.setText("0.00");

        jLayeredPane2.setLayer(jLabel2, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane2.setLayer(jLabel3, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane2.setLayer(txt_cash, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane2.setLayer(txt_change, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jLayeredPane2Layout = new javax.swing.GroupLayout(jLayeredPane2);
        jLayeredPane2.setLayout(jLayeredPane2Layout);
        jLayeredPane2Layout.setHorizontalGroup(
            jLayeredPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane2Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(jLayeredPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addGap(33, 33, 33)
                .addGroup(jLayeredPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txt_cash, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt_change, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(17, Short.MAX_VALUE))
        );
        jLayeredPane2Layout.setVerticalGroup(
            jLayeredPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jLayeredPane2Layout.createSequentialGroup()
                .addContainerGap(25, Short.MAX_VALUE)
                .addGroup(jLayeredPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txt_cash, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jLayeredPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txt_change, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(24, 24, 24))
        );

        jMenu1.setText("Home");
        jMenu1.setEnabled(false);
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Manager");
        jMenu2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu2ActionPerformed(evt);
            }
        });

        jMenuItem1.setText(" Product");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem1);
        jMenu2.add(jSeparator1);

        jMenuItem2.setText("Summery");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem2);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLayeredPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 516, Short.MAX_VALUE)
                    .addComponent(jLayeredPane1))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 305, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addComponent(btn_clear, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(btn_pay, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(txt_total, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(19, 19, 19))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(18, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLayeredPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(jLayeredPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 432, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel1)
                                .addComponent(txt_total, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(18, 18, 18)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(btn_pay, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(btn_clear, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(20, 20, 20))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    String cashbox = "";
    double change = 0;
    double totalVa = 0.00;
    
    DecimalFormat df = new DecimalFormat("##,###,###.00");
    
    public JTable getTb_cart() {
        return tb_cart;
    }
    
    private void updateCashbox(String value) {
        // เพิ่มค่า value เข้าไปใน cashbox
        cashbox += value;

        // พยายามแปลง cashbox ให้เป็น Double และจัดรูปแบบใหม่
        try {
            double number = Double.parseDouble(cashbox);
            txt_cash.setText(df.format(number));  // แสดงผลลัพธ์ที่มีการจัดรูปแบบ
        } catch (NumberFormatException e) {
            // ถ้าไม่สามารถแปลงได้ (เช่นมีตัวอักษรอื่นนอกจากตัวเลข) ให้แสดง cashbox แบบเดิม
            txt_cash.setText(cashbox);
        }
    }
    
    private void btn_2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_2ActionPerformed
        updateCashbox("2");
    }//GEN-LAST:event_btn_2ActionPerformed

    private void cmb_categoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmb_categoryActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmb_categoryActionPerformed

    private void btn_1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_1ActionPerformed
        // TODO add your handling code here:
        updateCashbox("1");
    }//GEN-LAST:event_btn_1ActionPerformed

    private void btn_3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_3ActionPerformed
        // TODO add your handling code here:
        updateCashbox("3");
    }//GEN-LAST:event_btn_3ActionPerformed

    private void btn_4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_4ActionPerformed
        // TODO add your handling code here:
        updateCashbox("4");
    }//GEN-LAST:event_btn_4ActionPerformed

    private void btn_5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_5ActionPerformed
        // TODO add your handling code here:
        updateCashbox("5");
    }//GEN-LAST:event_btn_5ActionPerformed

    private void btn_6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_6ActionPerformed
        // TODO add your handling code here:
        cashbox += "6";
        txt_cash.setText(cashbox);
    }//GEN-LAST:event_btn_6ActionPerformed

    private void btn_7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_7ActionPerformed
        // TODO add your handling code here:
        updateCashbox("7");
    }//GEN-LAST:event_btn_7ActionPerformed

    private void btn_8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_8ActionPerformed
        // TODO add your handling code here:
        updateCashbox("8");
    }//GEN-LAST:event_btn_8ActionPerformed

    private void btn_9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_9ActionPerformed
        // TODO add your handling code here:
        updateCashbox("9");
    }//GEN-LAST:event_btn_9ActionPerformed

    private void btn_0ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_0ActionPerformed
        // TODO add your handling code here:
        updateCashbox("0");
    }//GEN-LAST:event_btn_0ActionPerformed

    private void btn_dotActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_dotActionPerformed
        // TODO add your handling code here:
        updateCashbox(".");
    }//GEN-LAST:event_btn_dotActionPerformed

    private void btn_clear_numberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_clear_numberActionPerformed
        // TODO add your handling code here:'
        cashbox = "";
        txt_cash.setText("0.00");
        txt_change.setText("0.00");
    }//GEN-LAST:event_btn_clear_numberActionPerformed

    private void txt_cashFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txt_cashFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_cashFocusLost

    private void txt_cashFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txt_cashFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_cashFocusGained

    private void btn_1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_btn_1FocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_btn_1FocusGained

    private void btn_1FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_btn_1FocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_btn_1FocusLost

    private void btn_payActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_payActionPerformed
        
        
        
        //double cashin = Double.parseDouble(txt_cash.getText());
        
        // ใช้ parse เพื่อแปลงสตริงเป็น Number
        Number number;
        try {
            number = df.parse(txt_cash.getText());
            double cashin = number.doubleValue();
            
            String change = txt_change.getText().toString();
            String getcash = txt_cash.getText().toString();

            DefaultTableModel model = (DefaultTableModel) tb_cart.getModel();

            if (cashin != 0.0) {
                if(model.getRowCount() != 0) {
                    try {
                        // TODO add your handling code here:

                        String totalAmount = txt_total.getText();
                        String genInvoiceID = generateInvoice();
                        generateInvoiceFromTable(tb_cart, totalAmount, change, getcash, genInvoiceID);
                        insertHistory(genInvoiceID);
                    } catch (IOException ex) {
                        Logger.getLogger(frame_main.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                else {
                    JOptionPane.showMessageDialog(this, "Please select a product.");
                }
            }
            else {
                JOptionPane.showMessageDialog(this, "Please enter the amount received.");
            }
            
        } catch (ParseException ex) {
            Logger.getLogger(frame_main.class.getName()).log(Level.SEVERE, null, ex);
        }
            
        // แปลงเป็น double
       
    }//GEN-LAST:event_btn_payActionPerformed

    private void btn_clearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_clearActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) tb_cart.getModel();
        model.setRowCount(0);
        txt_total.setText("0.00");
        totalVa=0.00;
    }//GEN-LAST:event_btn_clearActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        queryClass qc = new queryClass();
        
        String getData = (String) cmb_category.getSelectedItem();
        
        System.out.println("getData : " + getData);
        
        fetchItemsByID(getData);
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jMenu2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu2ActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_jMenu2ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
        this.dispose();
        new frame_category_manage().setVisible(true);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // TODO add your handling code here:
        this.dispose();
        new frame_history().setVisible(true);
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void tb_cartMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tb_cartMouseClicked
        // TODO add your handling code here:
        
        JTable table = (JTable) evt.getSource();  // หรือ category_detail ถ้าใช้ตัวแปรนี้
        int row = table.rowAtPoint(evt.getPoint());  // หาตำแหน่งแถวที่คลิก
        int column = table.columnAtPoint(evt.getPoint());  // หาตำแหน่งคอลัมน์ที่คลิก

        // ตรวจสอบว่าเป็นการคลิกแถวที่มีข้อมูลหรือไม่ (แถวที่ถูกเลือก)
        if (row >= 0) {
            // ดึงข้อมูลจากเซลล์ในแถวที่คลิก โดยที่เราสนใจแค่คอลัมน์ 0 (id) และคอลัมน์ 1 (name)
            Object qty = table.getValueAt(row, 0);  // ค่าจากคอลัมน์ 0 คือ id
            Object id = table.getValueAt(row, 1);  // ค่าจากคอลัมน์ 1 คือ name
            Object name = table.getValueAt(row, 2);  // ค่าจากคอลัมน์ 1 คือ name
            Object price = table.getValueAt(row, 3);  // ค่าจากคอลัมน์ 1 คือ name
            Object des = table.getValueAt(row, 4);  // ค่าจากคอลัมน์ 1 คือ name
            
//            System.out.println(qty + "/" + id + "/" + name + "/" + price + "/" + des);

            String sqty = qty != null ? qty.toString() : "";
            String sid = id != null ? id.toString() : "";
            String sname = name != null ? name.toString() : "";
            String sprice = price != null ? price.toString() : "";
            String sdes = des != null ? des.toString() : "";

            
            
//            new product_item1(sqty, sid, sname, sprice, sdes);
             new product_detail(sqty, sid, sname, sprice, sdes, this).setVisible(true);
           
        }
        
    }//GEN-LAST:event_tb_cartMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frame_main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frame_main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frame_main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frame_main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frame_main().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_0;
    private javax.swing.JButton btn_1;
    private javax.swing.JButton btn_2;
    private javax.swing.JButton btn_3;
    private javax.swing.JButton btn_4;
    private javax.swing.JButton btn_5;
    private javax.swing.JButton btn_6;
    private javax.swing.JButton btn_7;
    private javax.swing.JButton btn_8;
    private javax.swing.JButton btn_9;
    private javax.swing.JButton btn_clear;
    private javax.swing.JButton btn_clear_number;
    private javax.swing.JButton btn_dot;
    private javax.swing.JButton btn_pay;
    private javax.swing.JComboBox<String> cmb_category;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JLayeredPane jLayeredPane2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPanel panel_showitems;
    private javax.swing.JTable tb_cart;
    private javax.swing.JTextField txt_cash;
    private javax.swing.JTextField txt_change;
    private javax.swing.JTextField txt_total;
    // End of variables declaration//GEN-END:variables

    private void fetchItems() {
        
        queryClass db = new queryClass();
        
        ArrayList<String> ListitemId = new ArrayList<>();
        ArrayList<String> ListitemLabel = new ArrayList<>();
        ArrayList<String> ListitemPrice = new ArrayList<>();
        ArrayList<String> ListitemImg = new ArrayList<>();
        
        ListitemId = db.getAllItemId();
        ListitemLabel = db.getAllItemLebel();
        ListitemPrice = db.getAllItemPrice();
        ListitemImg = db.getAllItemImg();
        
        panel_showitems.setLayout(new GridLayout(0, 3, 5, 5));

        for (int i = 0; i < ListitemId.size(); i++) {
            String foodID = ListitemId.get(i);
            String foodLabel = ListitemLabel.get(i);
            String foodPrice = ListitemPrice.get(i);
            String foodImgs = ListitemImg.get(i);

            panel_showitems.add(new panel_item(Integer.valueOf(foodID), foodLabel, Double.valueOf(foodPrice), foodImgs, this));
        }

        panel_showitems.revalidate();
        panel_showitems.repaint();
    }
    
//    private void fetchItemsByID(String category_id) {
//        
//        //System.out.println("fetchItemsByID : " + category_id);
//        
//        queryClass db = new queryClass();
//        
//        Item sd = db.getItemById(category_id);
//        
//        if (sd != null){
//            JOptionPane.showMessageDialog(this, "found!");
//            panel_showitems.removeAll();
//
//            panel_showitems.setLayout(new GridLayout(0, 3, 5, 5));
//
//            for (int i = 0; i < ListitemId.size(); i++) {
//                String foodID = ListitemId.get(i);
//                String foodLabel = ListitemLabel.get(i);
//                String foodPrice = ListitemPrice.get(i);
//                String foodImgs = ListitemImg.get(i);
//
//                panel_showitems.add(new panel_item(Integer.valueOf(foodID), foodLabel, Double.valueOf(foodPrice), foodImgs, this));
//            }
//
//            panel_showitems.revalidate();
//            panel_showitems.repaint();
//        }
//        else {
//            JOptionPane.showMessageDialog(this, "Data not found!");
//        }
//             
//    }
    
    public void fetchItemsByID(String category_id) {
        queryClass db = new queryClass();
        ArrayList<Item> items = db.getItemsByCategory(category_id);

        if (items != null && !items.isEmpty()) {
            //JOptionPane.showMessageDialog(this, "found!");
            
            panel_showitems.removeAll();
            
            panel_showitems.setLayout(new GridLayout(0, 3, 5, 5));

            for (Item item : items) {
                String foodID = String.valueOf(item.getId());
                String foodName = item.getName(); 
                String foodLabel = item.getLabel();
                String foodPrice = String.valueOf(item.getPrice()); 
                String foodImgs = item.getImg();

                panel_showitems.add(new panel_item(Integer.valueOf(foodID), foodLabel, Double.valueOf(foodPrice), foodImgs, this));
            }

            panel_showitems.revalidate();
            panel_showitems.repaint();
        } else {
            JOptionPane.showMessageDialog(this, "Data not found!");
        }
    }
    
//    public void fetchItemsByID(String category_id) {
//        queryClass db = new queryClass();
//        ArrayList<Item> items = db.getItemsByCategory(category_id);  // สมมุติว่า getItemsByCategory() คืน List<Item>
//
//        if (items != null && !items.isEmpty()) {
//            //JOptionPane.showMessageDialog(this, "found!");
//            
//            panel_showitems.removeAll();
//            
//            panel_showitems.setLayout(new GridLayout(0, 3, 5, 5));
//
//            // วนลูปเพิ่มรายการอาหารลงใน panel_showitems
//            for (Item item : items) {
//
//                panel_showitems.add(new panel_item1(item.getId(), item.getName(), item.getPrice(), item.getImg(), this));
//            }
//
//            panel_showitems.revalidate();
//            panel_showitems.repaint();
//        } else {
//            JOptionPane.showMessageDialog(this, "Data not found!");
//        }
//    }

    
    public void updateResult(String text) {
//        lb_result.setText(text);  // อัพเดตข้อความที่ lb_result
    }
    
    
    public double calChange() throws ParseException {
        
//        df.format(txt_total.getText())

        Number totalNumber = df.parse(txt_total.getText());
        double totalValue = totalNumber.doubleValue();
        
        Number cashNumber = df.parse(txt_cash.getText());
        double cashValue = cashNumber.doubleValue();
                
        double result = (cashValue - totalValue);
//        double result = (Double.valueOf(txt_cash.getText()) - Double.valueOf(txt_total.getText()));

        return result;
    }
    
    public void lisTxtCash() {
        txt_cash.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                System.out.println("Text in txt_cash changed: " + txt_cash.getText());
                
//                double rawChang = Double.parseDouble(txt_cash.getText());
                
                double result;
                try {
                    result = calChange();
                    
                    String forResult = df.format(result);
                    
                    if(result < 0){
                        txt_change.setText("Error");
                    }
                    else {
                        txt_change.setText(forResult);
                    }
                } catch (ParseException ex) {
                    Logger.getLogger(frame_main.class.getName()).log(Level.SEVERE, null, ex);
                }

                
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                System.out.println("Text in txt_cash changed: " + txt_cash.getText());
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                
            }
        });
    }
    
//    public void updateTableList(int itemid, String itemName, double price) {
//          
//        DefaultTableModel model = (DefaultTableModel) tb_cart.getModel();
//
//        int id = model.getRowCount() + 1;
//        Object[] newRow = {id, itemid, itemName, price};
//        model.addRow(newRow);
//    }
    
    public void updateTableList(int itemid, String itemName, double price, String des) {
        DefaultTableModel model = (DefaultTableModel) tb_cart.getModel();

        boolean itemExists = false;
        for (int i = 0; i < model.getRowCount(); i++) {
            int existingItemId = (int) model.getValueAt(i, 1);
            if (existingItemId == itemid) {
                int currentQuantity = (int) model.getValueAt(i, 0);
                double currentPrice = (double) model.getValueAt(i, 3);
                model.setValueAt(currentQuantity + 1, i, 0);
//                model.setValueAt(currentPrice + price, i, 3);
                model.setValueAt(currentPrice, i, 3);

                itemExists = true;
                break;
            }
        }

        if (!itemExists) {
            int id = model.getRowCount() + 1;
            Object[] newRow = {1, itemid, itemName, price, des};
            model.addRow(newRow);
        }
    }
    
    
    public void updateRowData(int id, int newQty, String newDescription) {
        
//        System.out.println("id = " + id + " qty = " + newQty + " des = " + newDescription);
        
        DefaultTableModel model = (DefaultTableModel) tb_cart.getModel();
        
        int rowCount = model.getRowCount();
        
        for (int i = 0; i < rowCount; i++) {

            int currentId = (int) model.getValueAt(i, 1);
            if (currentId == id) {

                model.setValueAt(newQty, i, 0);
                model.setValueAt(newDescription, i, 4);
                break;
            }
        }
        
        tb_cart.revalidate();
        tb_cart.repaint();
    }

    
    public void updateTotalValue(double data) {
        totalVa += data;
        txt_total.setText(totalVa+"");
    }
    
    public void fetchCategory() {
        queryClass db = new queryClass();
        ArrayList<String> cateList = new ArrayList<>();
        
        cateList = db.getCategory();
        
        cmb_category.removeAllItems();
        
        for (String category : cateList) {
            //System.out.println(category);
            cmb_category.addItem(category);
        }
    }
    
    public void fetchCategoryTest() {
        queryClass db = new queryClass();
//        ArrayList<String> cateList = new ArrayList<>();
//        
//        cateList = db.getCategory();
//        
//        cmb_category.removeAllItems();
//        
//        for (String category : cateList) {
//            //System.out.println(category);
//            cmb_category.addItem(category);
//        }


//        ArrayList<Item> cateList = new ArrayList<>();

        String idcate = (String) cmb_category.getSelectedItem();
        
        Item cateList = db.getItemById(idcate);
        
        
    }
    
//    public void fetchCategoryByID(String categoryName) {
//        queryClass db = new queryClass();
//        ArrayList<String> cateList = new ArrayList<>();
//        
//        cateList = db.getCategoryByID(categoryName);
//        
//        cmb_category.removeAllItems();
//        
//        for (String category : cateList) {
//            //System.out.println(category);
//            cmb_category.addItem(category);
//        }
//    }
    
    // Method สำหรับสร้างใบเสร็จจากข้อมูลใน JTable
    public static void generateInvoiceFromTable(JTable tb_cart, String totalCal, String txt_change, String getcash, String genInvoiceID) throws IOException {
        // สร้าง PdfWriter และ PdfDocument
        String dest = genInvoiceID + ".pdf";
        PdfWriter writer = new PdfWriter(dest);
        PdfDocument pdf = new PdfDocument(writer);
        Document document = new Document(pdf);

        // ใส่หัวเรื่องใบเสร็จ
        document.add(new Paragraph("Invoice ID : " + genInvoiceID)
                .setTextAlignment(TextAlignment.CENTER)
                .setFontSize(16));

        // เข้าถึงข้อมูลจาก JTable
        DefaultTableModel model = (DefaultTableModel) tb_cart.getModel();
        double totalAmount = 0.0;

        // ลูปเพื่อดึงข้อมูลจากแต่ละแถวใน JTable
        for (int i = 0; i < model.getRowCount(); i++) {
            int quantity = Integer.parseInt(model.getValueAt(i, 0).toString());   // จำนวน
            int itemID = Integer.parseInt(model.getValueAt(i, 1).toString());     // รหัสสินค้า
            String itemName = model.getValueAt(i, 2).toString();                  // ชื่อสินค้า
            double price = Double.parseDouble(model.getValueAt(i, 3).toString()); // ราคา
            String des = model.getValueAt(i, 4).toString();

            // คำนวณยอดรวมของแต่ละรายการ
            double total = quantity * price;  // หรือสามารถใช้ข้อมูลในคอลัมน์ Total ได้
//            totalAmount += total;  // คำนวณยอดรวมทั้งหมด

            // แสดงข้อมูลสินค้าในใบเสร็จ
            document.add(new Paragraph(itemName + " (" + quantity + " x) " + " - " + price + " Baht\n" + "\n" + "Des : " + des)
                    .setFontSize(12));
        }
        
        // ใส่ยอดรวมในใบเสร็จ
        document.add(new Paragraph("\nTotal Amount: " + totalCal + " Baht")
                .setTextAlignment(TextAlignment.RIGHT)
                .setFontSize(12));
        
        // ใส่ยอดรวมในใบเสร็จ
//        document.add(new Paragraph("\nChange: " + txt_change + " Baht\n" + "Cash: " + getcash)
        document.add(new Paragraph("Cash/Change: " + getcash + " Baht / " + txt_change + " Baht")
                .setTextAlignment(TextAlignment.RIGHT)
                .setFontSize(12));

        // ใส่ข้อความขอบคุณ
        document.add(new Paragraph("\nThank you for your purchase!")
                .setTextAlignment(TextAlignment.CENTER)
                .setFontSize(12));

        // ปิดเอกสาร
        document.close();

        System.out.println("Invoice created successfully at: " + dest);
    }
    
    
    public void insertHistory(String genInvoiceID) {
        
        queryClass qc = new queryClass();
        
        DefaultTableModel model = (DefaultTableModel) tb_cart.getModel();
        
        for (int i = 0; i < model.getRowCount(); i++) {
            int quantity = Integer.parseInt(model.getValueAt(i, 0).toString());
            int itemID = Integer.parseInt(model.getValueAt(i, 1).toString()); 
            String itemName = model.getValueAt(i, 2).toString();
            double price = Double.parseDouble(model.getValueAt(i, 3).toString());
            
            qc.insertDataHistory(quantity, itemID, itemName, price, genInvoiceID);
        }
        
        
    }
    
    
    
    
    // ฟังก์ชันในการคำนวณและอัปเดต total
    public void updateTotal(JTable tb_cart, JTextField txt_total) {
        // กำหนดตัวแปรในการเก็บผลรวม
        double total = 0.00;

        // ดึงข้อมูลจาก JTable
        DefaultTableModel model = (DefaultTableModel) tb_cart.getModel();
        int rowCount = model.getRowCount();

        // ลูปผ่านแต่ละแถวใน JTable
        for (int i = 0; i < rowCount; i++) {
            // ดึงค่า qty และ price จากแต่ละแถว
            int qty = (Integer) model.getValueAt(i, 0);  // ค่าที่ตำแหน่งคอลัมน์แรก (qty)
            double price = (Double) model.getValueAt(i, 3);  // ค่าที่ตำแหน่งคอลัมน์ที่ 4 (price)
            
            // คำนวณ total
            total += qty * price;
        }

        // อัปเดตค่าที่คำนวณได้ลงใน txt_total
        txt_total.setText(df.format(total)); // แสดงผลรวมแบบทศนิยม 2 ตำแหน่ง
    }
    
    
    
    
    
    
    
    public static String getCurrentTime() {
        LocalDateTime currentDateTime = LocalDateTime.now();
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
        
        return currentDateTime.format(formatter);
    }
    
    public static String generateInvoice() {
        Random rand = new Random();
        
        int randomNumber = rand.nextInt(90000000) + 10000000; // สุ่มตัวเลขในช่วง 10000000 ถึง 99999999
        
        return "INVOICE-" + randomNumber;
    }
    
}
